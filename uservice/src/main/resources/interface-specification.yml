openapi: 3.0.3
info:
  title: Ontology Manager
  description: 'This is the microservice responsible to manage user-defined types and instances'
  version: '__VERSION__'
servers:
  - #__URL__
tags:
  - name: OntologyManager
    description: All the ontology-related operations
paths:
  /ontology/entity-type:
    post:
      tags:
        - OntologyManager
      summary: Create a user-defined type
      operationId: createType
      requestBody:
        description: An EntityType spec
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityType'
        required: true
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
    delete:
      tags:
        - OntologyManager
      summary: Delete a user-defined type
      operationId: deleteType
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
            description: Name of the user-defined type to be deleted
      responses:
        200:
          description: If successful, returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
    get:
      tags:
        - OntologyManager
      summary: Get a user-defined type
      operationId: readType
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
            description: user-defined type name
      responses:
        200:
          description: If successful, return an EntityType object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityType'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity-type/constraints:
    put:
      tags:
        - OntologyManager
      summary: Update a user-defined type constraints
      operationId: updateTypeConstraints
      requestBody:
        description: An EntityType spec
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityType'
        required: true
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity-type/constraints/yaml:
    post:
      tags:
        - OntologyManager
      summary: Update a user-defined type
      operationId: updateTypeConstraintsByYaml
      requestBody:
        description: A YAML file containing an Entity Type spec
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity-type/yaml:
    post:
      tags:
        - OntologyManager
      summary: Create a user-defined type
      operationId: createTypeByYaml
      requestBody:
        description: A YAML file containing an Entity Type spec
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
    get:
      tags:
        - OntologyManager
      summary: Get a user-defined type as a YAML file
      operationId: readTypeAsYaml
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
            description: user-defined type name
      responses:
        200:
          description: If successful, return an EntityType object as a YAML file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity:
    post:
      tags:
        - OntologyManager
      summary: Create a user-defined type instance
      operationId: createEntity
      requestBody:
        description: An Entity spec
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
        required: true
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/{id}:
    get:
      tags:
        - OntologyManager
      summary: Get a user-defined type instance
      operationId: readEntity
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: user-defined type instance id
      responses:
        200:
          description: If successful, return an EntityType object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/{deleteId}:
    delete:
      tags:
        - OntologyManager
      summary: Delete a user-defined type instance
      operationId: deleteEntity
      parameters:
        - in: path
          name: deleteId
          required: true
          schema:
            type: string
            description: user-defined type instance ID to be deleted
      responses:
        200:
          description: If successful, returns "OK"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'

  /ontology/entity/{updateId}:
    put:
      tags:
        - OntologyManager
      summary: Update a user-defined type instance
      operationId: updateEntity
      parameters:
        - in: path
          name: updateId
          required: true
          schema:
            type: string
          description: User-defined type instance ID to be updated
      requestBody:
        description: The new entity data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        200:
          description: If successful, returns the ID of the updated entity
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'

  /ontology/entity/yaml/{updateId}:
    put:
      tags:
        - OntologyManager
      summary: Update a user-defined type instance using a Yaml file
      operationId: updateEntityByYaml
      parameters:
        - in: path
          name: updateId
          required: true
          schema:
            type: string
          description: User-defined type instance ID to be updated
      requestBody:
        description: A YAML file containing the new entity data
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: If successful, returns the ID of the updated entity
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/yaml:
    post:
      tags:
        - OntologyManager
      summary: Create a user-defined type instance
      operationId: createEntityByYaml
      requestBody:
        description: A YAML file containing an Entity spec
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/{id}/yaml:
    get:
      tags:
        - OntologyManager
      summary: Get a user-defined type instance as a YAML file
      operationId: readEntityAsYaml
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: user-defined type instance id
      responses:
        200:
          description: If successful, return an Entity object as a YAML file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/link/{instanceId1}/{rel}/{instanceId2}:
    post:
      tags:
        - OntologyManager
      summary: Link two instances with a specified relationship
      operationId: linkEntity
      parameters:
        - in: path
          name: instanceId1
          required: true
          schema:
            type: string
            description: The unique identifier of the first instance
        - in: path
          name: rel
          required: true
          schema:
            type: string
            description: The type of relationship to establish between the two instances
        - in: path
          name: instanceId2
          required: true
          schema:
            type: string
            description: The unique identifier of the second instance
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input, such as non-existent instance IDs or unrecognized relationship type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/unlink/{instanceId1}/{rel}/{instanceId2}:
    post:
      tags:
        - OntologyManager
      summary: Unlink two instances by removing a specified relationship
      operationId: unlinkEntity
      parameters:
        - in: path
          name: instanceId1
          required: true
          schema:
            type: string
            description: The unique identifier of the first instance
        - in: path
          name: rel
          required: true
          schema:
            type: string
            description: The type of relationship to be removed between the two instances
        - in: path
          name: instanceId2
          required: true
          schema:
            type: string
            description: The unique identifier of the second instance
      responses:
        200:
          description: If successful returns "OK"
          content:
            application/text:
              schema:
                type: string
        400:
          description: Invalid input, such as non-existent instance IDs or an unrecognized relationship type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/linked/{instanceId}/{rel}:
    get:
      tags:
        - OntologyManager
      summary: Retrieve instances linked to a specified instance via a given relationship
      operationId: linkedEntities
      parameters:
        - in: path
          name: instanceId
          description: The instance ID for which linked instances are being queried
          required: true
          schema:
            type: string
        - in: path
          name: rel
          description: The relationship through which instances are linked.
          required: true
          schema:
            type: string
      responses:
        200:
          description: If successful, returns a list of linked instance IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          description: Invalid input; details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem, details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/id/{entityTypeName}:
    get:
      tags:
        - OntologyManager
      summary: Given a query request returns a list of instance IDs
      operationId: listEntitiesByIds
      parameters:
        - in: path
          name: entityTypeName
          schema:
            type: string
          required: true
      requestBody:
        description: A query request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      responses:
        200:
          description: If successful, returns a list of instance IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          description: Invalid input; details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem, details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/entity/entities/{entityTypeName}:
    get:
      tags:
        - OntologyManager
      summary: Given a query request returns a list of instances
      operationId: listEntities
      parameters:
        - in: path
          name: entityTypeName
          schema:
            type: string
          required: true
      requestBody:
        description: A query request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      responses:
        200:
          description: If successful, returns a list of instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        400:
          description: Invalid input; details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem, details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/trait:
    post:
      tags:
        - OntologyManager
      summary: Create a user-defined trait
      operationId: createTrait
      requestBody:
        description: A user-defined Trait spec
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trait'
        required: true
      responses:
        200:
          description: If successful, returns "OK"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input; details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem, details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/trait/link/{trait1}/{rel}/{trait2}:
    put:
      tags:
        - OntologyManager
      summary: Link two traits with a relationship
      operationId: linkTrait
      parameters:
        - in: path
          name: trait1
          description: First trait
          required: true
          schema:
            type: string
        - in: path
          name: rel
          description: Relationship between the two traits
          required: true
          schema:
            type: string
        - in: path
          name: trait2
          description: The second trait
          required: true
          schema:
            type: string
      responses:
        200:
          description: If successful, returns "OK"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input; details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem, details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/trait/unlink/{trait1}/{rel}/{trait2}:
    put:
      tags:
        - OntologyManager
      summary: Unlink two traits with a relationship
      operationId: unlinkTrait
      parameters:
        - in: path
          name: trait1
          description: First trait
          required: true
          schema:
            type: string
        - in: path
          name: rel
          description: Relationship between the two traits
          required: true
          schema:
            type: string
        - in: path
          name: trait2
          description: The second trait
          required: true
          schema:
            type: string
      responses:
        200:
          description: If successful, returns "OK"
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input; details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem, details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /ontology/trait/link/{traitName}/{rel}:
    get:
      tags:
        - OntologyManager
      summary: Retrieve traits linked to a specified trait via a given relationship
      operationId: linkedTraits
      parameters:
        - in: path
          name: traitName
          description: The trait for which linked traits are being queried
          required: true
          schema:
            type: string
        - in: path
          name: rel
          description: The relationship through which traits are linked
          required: true
          schema:
            type: string
      responses:
        200:
          description: If successful, returns a list of linked traits
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          description: Invalid input; details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem, details of the error are provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
components:
  schemas:
    Entity:
      required:
        - entityId
        - entityTypeName
        - values
      type: object
      properties:
        entityId:
          type: string
        entityTypeName:
          type: string
        values:
          $ref: '#/components/schemas/Values'
    EntityType:
      required:
        - name
        - schema
      type: object
      properties:
        name:
          type: string
        traits:
          type: array
          items:
            type: string
        schema:
          $ref: '#/components/schemas/Schema'
        fatherName:
          type: string
    Values:
      type: object
    Schema:
      type: array
      items:
        $ref: '#/components/schemas/AttributeType'
    Trait:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        inheritsFrom:
          type: string
    AttributeType:
      type: object
      required:
        - name
        - typeName
      properties:
        name:
          type: string
        typeName:
          $ref: '#/components/schemas/AttributeTypeName'
        mode:
          $ref: '#/components/schemas/Mode'
        constraints:
          type: string
        attributeTypes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
    AttributeTypeName:
      type: string
      enum:
        - String
        - Integer
        - Long
        - Float
        - Double
        - Bool
        - Date
        - Timestamp
        - Json
        - Struct
    Mode:
      type: string
      enum:
        - Required
        - Repeated
        - Nullable
    QueryRequest:
      required:
        - query
      type: object
      properties:
        query:
          type: string
        limit:
          type: integer
          format: int32
          minimum: 1
    ValidationError:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
    SystemError:
      required:
        - error
      type: object
      properties:
        error:
          type: string